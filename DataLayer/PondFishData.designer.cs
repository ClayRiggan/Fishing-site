#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PondFish")]
	public partial class PondFishDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMember(Member instance);
    partial void UpdateMember(Member instance);
    partial void DeleteMember(Member instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertBoat(Boat instance);
    partial void UpdateBoat(Boat instance);
    partial void DeleteBoat(Boat instance);
    partial void InsertFish(Fish instance);
    partial void UpdateFish(Fish instance);
    partial void DeleteFish(Fish instance);
    partial void InsertPowerType(PowerType instance);
    partial void UpdatePowerType(PowerType instance);
    partial void DeletePowerType(PowerType instance);
    #endregion
		
		public PondFishDataDataContext() : 
				base(global::DataLayer.Properties.Settings.Default.PondFishConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PondFishDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PondFishDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PondFishDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PondFishDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Member> Members
		{
			get
			{
				return this.GetTable<Member>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<Boat> Boats
		{
			get
			{
				return this.GetTable<Boat>();
			}
		}
		
		public System.Data.Linq.Table<Fish> Fishes
		{
			get
			{
				return this.GetTable<Fish>();
			}
		}
		
		public System.Data.Linq.Table<PowerType> PowerTypes
		{
			get
			{
				return this.GetTable<PowerType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Members")]
	public partial class Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _Phone;
		
		private string _Address;
		
		private string _Address2;
		
		private string _City;
		
		private string _State;
		
		private string _Zip;
		
		private System.Nullable<bool> _IsAtive;
		
		private System.Nullable<System.DateTime> _DateAdded;
		
		private EntitySet<Boat> _Boats;
		
		private EntitySet<Fish> _Fishes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnIsAtiveChanging(System.Nullable<bool> value);
    partial void OnIsAtiveChanged();
    partial void OnDateAddedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateAddedChanged();
    #endregion
		
		public Member()
		{
			this._Boats = new EntitySet<Boat>(new Action<Boat>(this.attach_Boats), new Action<Boat>(this.detach_Boats));
			this._Fishes = new EntitySet<Fish>(new Action<Fish>(this.attach_Fishes), new Action<Fish>(this.detach_Fishes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(20)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(20)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(25)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="VarChar(50)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(20)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(20)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="VarChar(15)")]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAtive", DbType="Bit")]
		public System.Nullable<bool> IsAtive
		{
			get
			{
				return this._IsAtive;
			}
			set
			{
				if ((this._IsAtive != value))
				{
					this.OnIsAtiveChanging(value);
					this.SendPropertyChanging();
					this._IsAtive = value;
					this.SendPropertyChanged("IsAtive");
					this.OnIsAtiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Boat", Storage="_Boats", ThisKey="Id", OtherKey="MemberId")]
		public EntitySet<Boat> Boats
		{
			get
			{
				return this._Boats;
			}
			set
			{
				this._Boats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Fish", Storage="_Fishes", ThisKey="Id", OtherKey="MemberId")]
		public EntitySet<Fish> Fishes
		{
			get
			{
				return this._Fishes;
			}
			set
			{
				this._Fishes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Boats(Boat entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Boats(Boat entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_Fishes(Fish entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Fishes(Fish entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _State;
		
		private string _GPS;
		
		private System.Nullable<bool> _IsCoast;
		
		private System.Nullable<int> _FishId;
		
		private EntitySet<Fish> _Fishes;
		
		private EntityRef<Fish> _Fish;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnGPSChanging(string value);
    partial void OnGPSChanged();
    partial void OnIsCoastChanging(System.Nullable<bool> value);
    partial void OnIsCoastChanged();
    partial void OnFishIdChanging(System.Nullable<int> value);
    partial void OnFishIdChanged();
    #endregion
		
		public Location()
		{
			this._Fishes = new EntitySet<Fish>(new Action<Fish>(this.attach_Fishes), new Action<Fish>(this.detach_Fishes));
			this._Fish = default(EntityRef<Fish>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(20)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GPS", DbType="VarChar(50)")]
		public string GPS
		{
			get
			{
				return this._GPS;
			}
			set
			{
				if ((this._GPS != value))
				{
					this.OnGPSChanging(value);
					this.SendPropertyChanging();
					this._GPS = value;
					this.SendPropertyChanged("GPS");
					this.OnGPSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCoast", DbType="Bit")]
		public System.Nullable<bool> IsCoast
		{
			get
			{
				return this._IsCoast;
			}
			set
			{
				if ((this._IsCoast != value))
				{
					this.OnIsCoastChanging(value);
					this.SendPropertyChanging();
					this._IsCoast = value;
					this.SendPropertyChanged("IsCoast");
					this.OnIsCoastChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FishId", DbType="Int")]
		public System.Nullable<int> FishId
		{
			get
			{
				return this._FishId;
			}
			set
			{
				if ((this._FishId != value))
				{
					if (this._Fish.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFishIdChanging(value);
					this.SendPropertyChanging();
					this._FishId = value;
					this.SendPropertyChanged("FishId");
					this.OnFishIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Fish", Storage="_Fishes", ThisKey="Id", OtherKey="LocationId")]
		public EntitySet<Fish> Fishes
		{
			get
			{
				return this._Fishes;
			}
			set
			{
				this._Fishes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fish_Location", Storage="_Fish", ThisKey="FishId", OtherKey="Id", IsForeignKey=true)]
		public Fish Fish
		{
			get
			{
				return this._Fish.Entity;
			}
			set
			{
				Fish previousValue = this._Fish.Entity;
				if (((previousValue != value) 
							|| (this._Fish.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fish.Entity = null;
						previousValue.Locations.Remove(this);
					}
					this._Fish.Entity = value;
					if ((value != null))
					{
						value.Locations.Add(this);
						this._FishId = value.Id;
					}
					else
					{
						this._FishId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Fish");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fishes(Fish entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Fishes(Fish entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Boats")]
	public partial class Boat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _HullNumber;
		
		private System.Nullable<int> _PowerId;
		
		private System.Nullable<int> _MemberId;
		
		private System.Nullable<bool> _IsDeleted;
		
		private System.Nullable<int> _Size;
		
		private string _Manufacturer;
		
		private string _Model;
		
		private EntitySet<Fish> _Fishes;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<PowerType> _PowerType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnHullNumberChanging(string value);
    partial void OnHullNumberChanged();
    partial void OnPowerIdChanging(System.Nullable<int> value);
    partial void OnPowerIdChanged();
    partial void OnMemberIdChanging(System.Nullable<int> value);
    partial void OnMemberIdChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    partial void OnSizeChanging(System.Nullable<int> value);
    partial void OnSizeChanged();
    partial void OnManufacturerChanging(string value);
    partial void OnManufacturerChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    #endregion
		
		public Boat()
		{
			this._Fishes = new EntitySet<Fish>(new Action<Fish>(this.attach_Fishes), new Action<Fish>(this.detach_Fishes));
			this._Member = default(EntityRef<Member>);
			this._PowerType = default(EntityRef<PowerType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HullNumber", DbType="VarChar(20)")]
		public string HullNumber
		{
			get
			{
				return this._HullNumber;
			}
			set
			{
				if ((this._HullNumber != value))
				{
					this.OnHullNumberChanging(value);
					this.SendPropertyChanging();
					this._HullNumber = value;
					this.SendPropertyChanged("HullNumber");
					this.OnHullNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PowerId", DbType="Int")]
		public System.Nullable<int> PowerId
		{
			get
			{
				return this._PowerId;
			}
			set
			{
				if ((this._PowerId != value))
				{
					if (this._PowerType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPowerIdChanging(value);
					this.SendPropertyChanging();
					this._PowerId = value;
					this.SendPropertyChanged("PowerId");
					this.OnPowerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberId", DbType="Int")]
		public System.Nullable<int> MemberId
		{
			get
			{
				return this._MemberId;
			}
			set
			{
				if ((this._MemberId != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIdChanging(value);
					this.SendPropertyChanging();
					this._MemberId = value;
					this.SendPropertyChanged("MemberId");
					this.OnMemberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit")]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Int")]
		public System.Nullable<int> Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manufacturer", DbType="VarChar(50)")]
		public string Manufacturer
		{
			get
			{
				return this._Manufacturer;
			}
			set
			{
				if ((this._Manufacturer != value))
				{
					this.OnManufacturerChanging(value);
					this.SendPropertyChanging();
					this._Manufacturer = value;
					this.SendPropertyChanged("Manufacturer");
					this.OnManufacturerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="VarChar(50)")]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Boat_Fish", Storage="_Fishes", ThisKey="Id", OtherKey="BoatId")]
		public EntitySet<Fish> Fishes
		{
			get
			{
				return this._Fishes;
			}
			set
			{
				this._Fishes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Boat", Storage="_Member", ThisKey="MemberId", OtherKey="Id", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Boats.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Boats.Add(this);
						this._MemberId = value.Id;
					}
					else
					{
						this._MemberId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerType_Boat", Storage="_PowerType", ThisKey="PowerId", OtherKey="Id", IsForeignKey=true)]
		public PowerType PowerType
		{
			get
			{
				return this._PowerType.Entity;
			}
			set
			{
				PowerType previousValue = this._PowerType.Entity;
				if (((previousValue != value) 
							|| (this._PowerType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PowerType.Entity = null;
						previousValue.Boats.Remove(this);
					}
					this._PowerType.Entity = value;
					if ((value != null))
					{
						value.Boats.Add(this);
						this._PowerId = value.Id;
					}
					else
					{
						this._PowerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PowerType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fishes(Fish entity)
		{
			this.SendPropertyChanging();
			entity.Boat = this;
		}
		
		private void detach_Fishes(Fish entity)
		{
			this.SendPropertyChanging();
			entity.Boat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fishs")]
	public partial class Fish : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<decimal> _Weight;
		
		private string _Type;
		
		private System.Nullable<int> _LocationId;
		
		private string _Notes;
		
		private System.Nullable<int> _BoatId;
		
		private System.Nullable<int> _MemberId;
		
		private System.Nullable<System.DateTime> _DateCaught;
		
		private System.Nullable<decimal> _Length;
		
		private System.Nullable<bool> _IsDeleted;
		
		private EntitySet<Location> _Locations;
		
		private EntityRef<Boat> _Boat;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnWeightChanging(System.Nullable<decimal> value);
    partial void OnWeightChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnLocationIdChanging(System.Nullable<int> value);
    partial void OnLocationIdChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnBoatIdChanging(System.Nullable<int> value);
    partial void OnBoatIdChanged();
    partial void OnMemberIdChanging(System.Nullable<int> value);
    partial void OnMemberIdChanged();
    partial void OnDateCaughtChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCaughtChanged();
    partial void OnLengthChanging(System.Nullable<decimal> value);
    partial void OnLengthChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Fish()
		{
			this._Locations = new EntitySet<Location>(new Action<Location>(this.attach_Locations), new Action<Location>(this.detach_Locations));
			this._Boat = default(EntityRef<Boat>);
			this._Location = default(EntityRef<Location>);
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(25)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="Int")]
		public System.Nullable<int> LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="VarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoatId", DbType="Int")]
		public System.Nullable<int> BoatId
		{
			get
			{
				return this._BoatId;
			}
			set
			{
				if ((this._BoatId != value))
				{
					if (this._Boat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoatIdChanging(value);
					this.SendPropertyChanging();
					this._BoatId = value;
					this.SendPropertyChanged("BoatId");
					this.OnBoatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberId", DbType="Int")]
		public System.Nullable<int> MemberId
		{
			get
			{
				return this._MemberId;
			}
			set
			{
				if ((this._MemberId != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIdChanging(value);
					this.SendPropertyChanging();
					this._MemberId = value;
					this.SendPropertyChanged("MemberId");
					this.OnMemberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCaught", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCaught
		{
			get
			{
				return this._DateCaught;
			}
			set
			{
				if ((this._DateCaught != value))
				{
					this.OnDateCaughtChanging(value);
					this.SendPropertyChanging();
					this._DateCaught = value;
					this.SendPropertyChanged("DateCaught");
					this.OnDateCaughtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit")]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fish_Location", Storage="_Locations", ThisKey="Id", OtherKey="FishId")]
		public EntitySet<Location> Locations
		{
			get
			{
				return this._Locations;
			}
			set
			{
				this._Locations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Boat_Fish", Storage="_Boat", ThisKey="BoatId", OtherKey="Id", IsForeignKey=true)]
		public Boat Boat
		{
			get
			{
				return this._Boat.Entity;
			}
			set
			{
				Boat previousValue = this._Boat.Entity;
				if (((previousValue != value) 
							|| (this._Boat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Boat.Entity = null;
						previousValue.Fishes.Remove(this);
					}
					this._Boat.Entity = value;
					if ((value != null))
					{
						value.Fishes.Add(this);
						this._BoatId = value.Id;
					}
					else
					{
						this._BoatId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Boat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Fish", Storage="_Location", ThisKey="LocationId", OtherKey="Id", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Fishes.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Fishes.Add(this);
						this._LocationId = value.Id;
					}
					else
					{
						this._LocationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Fish", Storage="_Member", ThisKey="MemberId", OtherKey="Id", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Fishes.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Fishes.Add(this);
						this._MemberId = value.Id;
					}
					else
					{
						this._MemberId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.Fish = this;
		}
		
		private void detach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.Fish = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PowerType")]
	public partial class PowerType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<bool> _Motor;
		
		private System.Nullable<bool> _Peddle;
		
		private System.Nullable<bool> _Padel;
		
		private EntitySet<Boat> _Boats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMotorChanging(System.Nullable<bool> value);
    partial void OnMotorChanged();
    partial void OnPeddleChanging(System.Nullable<bool> value);
    partial void OnPeddleChanged();
    partial void OnPadelChanging(System.Nullable<bool> value);
    partial void OnPadelChanged();
    #endregion
		
		public PowerType()
		{
			this._Boats = new EntitySet<Boat>(new Action<Boat>(this.attach_Boats), new Action<Boat>(this.detach_Boats));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Motor", DbType="Bit")]
		public System.Nullable<bool> Motor
		{
			get
			{
				return this._Motor;
			}
			set
			{
				if ((this._Motor != value))
				{
					this.OnMotorChanging(value);
					this.SendPropertyChanging();
					this._Motor = value;
					this.SendPropertyChanged("Motor");
					this.OnMotorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Peddle", DbType="Bit")]
		public System.Nullable<bool> Peddle
		{
			get
			{
				return this._Peddle;
			}
			set
			{
				if ((this._Peddle != value))
				{
					this.OnPeddleChanging(value);
					this.SendPropertyChanging();
					this._Peddle = value;
					this.SendPropertyChanged("Peddle");
					this.OnPeddleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Padel", DbType="Bit")]
		public System.Nullable<bool> Padel
		{
			get
			{
				return this._Padel;
			}
			set
			{
				if ((this._Padel != value))
				{
					this.OnPadelChanging(value);
					this.SendPropertyChanging();
					this._Padel = value;
					this.SendPropertyChanged("Padel");
					this.OnPadelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerType_Boat", Storage="_Boats", ThisKey="Id", OtherKey="PowerId")]
		public EntitySet<Boat> Boats
		{
			get
			{
				return this._Boats;
			}
			set
			{
				this._Boats.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Boats(Boat entity)
		{
			this.SendPropertyChanging();
			entity.PowerType = this;
		}
		
		private void detach_Boats(Boat entity)
		{
			this.SendPropertyChanging();
			entity.PowerType = null;
		}
	}
}
#pragma warning restore 1591
